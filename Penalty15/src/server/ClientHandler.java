package server;

import common.Match;
import common.MatchDetails;
import common.Message;
import common.User;

import java.io.*;
import java.net.Socket;
import java.sql.SQLException;
import java.util.List;
import javafx.util.Pair;

public class ClientHandler implements Runnable {
    private Socket socket;
    private Server server;
    private DatabaseManager dbManager;
    private ObjectInputStream in;
    private ObjectOutputStream out;
    private User user;
    private GameRoom gameRoom;
    private volatile boolean isRunning = true;

    public ClientHandler(Socket socket, Server server, DatabaseManager dbManager) {
        this.socket = socket;
        this.server = server;
        this.dbManager = dbManager;
        try {
            // ƒê·∫∑t ObjectOutputStream tr∆∞·ªõc ObjectInputStream ƒë·ªÉ tr√°nh deadlock
            out = new ObjectOutputStream(socket.getOutputStream());
            out.flush(); // ƒê·∫£m b·∫£o ObjectOutputStream ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc
            in = new ObjectInputStream(socket.getInputStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public User getUser() {
        return user;
    }

    // Trong ph∆∞∆°ng th·ª©c run()
    @Override
    public void run() {
        try {
            while (isRunning) {
                Message message = (Message) in.readObject();
                if (message != null) {
                    handleMessage(message);
                }
            }
        } catch (IOException | ClassNotFoundException | SQLException e) {
            System.out.println("‚ö†Ô∏è K·∫øt n·ªëi v·ªõi " + (user != null ? user.getUsername() : "client") + " b·ªã ng·∫Øt: " + e.getMessage());
            isRunning = false; // D·ª´ng v√≤ng l·∫∑p
            
            // X·ª¨ L√ù DISCONNECT TRONG GAME
            if (gameRoom != null && user != null) {
                System.out.println("üéÆ Ng∆∞·ªùi ch∆°i " + user.getUsername() + " ƒëang trong game, x·ª≠ l√Ω disconnect...");
                try {
                    gameRoom.handlePlayerDisconnect(this);
                    // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ message ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ng∆∞·ªùi ch∆°i c√≤n l·∫°i
                    Thread.sleep(500);
                } catch (IOException | SQLException ex) {
                    System.err.println("‚ùå L·ªói x·ª≠ l√Ω disconnect trong GameRoom: " + ex.getMessage());
                    ex.printStackTrace();
                } catch (InterruptedException ex) {
                    System.err.println("‚ùå L·ªói sleep: " + ex.getMessage());
                }
            }
        } finally {
            try {
                if (user != null) {
                    System.out.println("üîÑ Cleanup cho user: " + user.getUsername());
                    
                    // Ch·ªâ update status n·∫øu KH√îNG c√≤n trong game (ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi GameRoom)
                    if (gameRoom == null) {
                        dbManager.updateUserStatus(user.getId(), "offline");
                        server.broadcast(new Message("status_update", user.getUsername() + " ƒë√£ offline."));
                    }
                    
                    server.removeClient(this);
                }
                if (socket != null && !socket.isClosed()) {
                    socket.close();
                }
            } catch (IOException | SQLException e) {
                System.err.println("‚ùå L·ªói cleanup: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    private void handleMessage(Message message) throws IOException, SQLException {
        switch (message.getType()) {
            case "login":
                handleLogin(message);
                break;
            case "register":
                handleRegister(message);
                break;
            case "get_users":
                handleGetUsers();
                break;
            case "request_match":
                handleMatchRequest(message);
                break;
            case "match_response":
                handleMatchResponse(message);
                break;
            case "chat":
                handleChat(message);
                break;
            case "logout":
                handleLogout();
                break;
            case "shoot":
                handleShoot(message);
                break;
            case "goalkeeper":
                handleGoalkeeper(message);
                break;
            case "play_again_response":
                handlePlayAgainResponse(message);
                break;
            case "get_leaderboard":
                handleGetLeaderboard();
                break;
            case "get_match_history":
                handleGetMatchHistory();
                break;
            case "quit_game":
                handleQuitGame();
                break;
            case "get_user_matches":
                handleGetUserMatches();
                break;
            case "get_match_details":
                handleGetMatchDetails(message);
                break;
            case "timeout":
                handleHandleTimeout(message);
                break;
            case "return_to_main":
                // Kh√¥ng c·∫ßn x·ª≠ l√Ω g√¨ th√™m ·ªü server side cho th√¥ng b√°o n√†y
                break;
            // C√°c lo·∫°i message kh√°c
            // ...
        }
    }

    private void handleHandleTimeout(Message message) throws IOException, SQLException {
        if (gameRoom != null) {
            if (message.getContent().equals("shooter")) {
                gameRoom.startShooterTimeout();
            } else if (message.getContent().equals("goalkeeper")) {
                gameRoom.startGoalkeeperTimeout();
            }
        }
    }

    private void handleGetMatchDetails(Message message) throws IOException, SQLException {
        int matchId = (int) message.getContent();
        List<MatchDetails> details = dbManager.getMatchDetails(matchId);
        sendMessage(new Message("match_details", details));
    }

    private void handleGetUserMatches() throws IOException, SQLException {
        List<Match> matches = dbManager.getUserMatches(user.getId());
        sendMessage(new Message("user_matches", matches));
    }

    private void handleQuitGame() throws IOException, SQLException {
        if (gameRoom != null) {
            gameRoom.handlePlayerQuit(this);
        }
    }

    private void handleGetMatchHistory() throws IOException, SQLException {
        List<MatchDetails> history = dbManager.getUserMatchHistory(user.getId());
        sendMessage(new Message("match_history", history));
    }

    private void handleGetLeaderboard() throws IOException, SQLException {
        List<User> leaderboard = dbManager.getLeaderboard();
        sendMessage(new Message("leaderboard", leaderboard));
    }

    private void handlePlayAgainResponse(Message message) throws SQLException, IOException {
        boolean playAgain = (boolean) message.getContent();
        if (gameRoom != null) {
            gameRoom.handlePlayAgainResponse(playAgain, this);
        }
    }

    private void handleLogin(Message message) throws IOException, SQLException {
        String[] credentials = (String[]) message.getContent();
        String username = credentials[0];
        String password = credentials[1];
        Pair<User, Boolean> pairAuthnticatedUser = dbManager.authenticate(username, password);
        User _user = pairAuthnticatedUser.getKey();
        Boolean isOffline = pairAuthnticatedUser.getValue();
        
        if (_user != null) {
            // Ki·ªÉm tra xem c√≥ client c≈© ƒëang gi·ªØ t√†i kho·∫£n n√†y kh√¥ng
            ClientHandler oldClient = server.getClientById(_user.getId());
            
            if (oldClient != null && !isOffline) {
                // C√≥ client c≈© ƒëang online, ƒë√° client c≈© ra
                System.out.println("‚ö†Ô∏è T√†i kho·∫£n " + username + " ƒëang ƒë∆∞·ª£c ƒëƒÉng nh·∫≠p t·ª´ n∆°i kh√°c. ƒê√° client c≈©.");
                try {
                    // N·∫øu client c≈© ƒëang trong game, x·ª≠ l√Ω disconnect tr∆∞·ªõc
                    if (oldClient.gameRoom != null) {
                        System.out.println("‚ö†Ô∏è Client c≈© ƒëang trong game, x·ª≠ l√Ω disconnect...");
                        try {
                            oldClient.gameRoom.handlePlayerDisconnect(oldClient);
                            Thread.sleep(300); // ƒê·ª£i message g·ª≠i ƒëi
                        } catch (SQLException | InterruptedException e) {
                            System.err.println("L·ªói x·ª≠ l√Ω disconnect cho client c≈©: " + e.getMessage());
                        }
                    }
                    
                    oldClient.sendMessage(new Message("force_logout", "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒëƒÉng nh·∫≠p t·ª´ n∆°i kh√°c."));
                    oldClient.isRunning = false;
                    server.removeClient(oldClient);
                    if (oldClient.socket != null && !oldClient.socket.isClosed()) {
                        oldClient.socket.close();
                    }
                } catch (IOException e) {
                    System.err.println("L·ªói khi ƒë√° client c≈©: " + e.getMessage());
                }
            }
            
            // Cho ph√©p ƒëƒÉng nh·∫≠p m·ªõi
            this.user = _user;
            dbManager.updateUserStatus(user.getId(), "online");
            user.setStatus("online"); // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong ƒë·ªëi t∆∞·ª£ng user
            sendMessage(new Message("login_success", user));
            server.broadcast(new Message("status_update", user.getUsername() + " ƒë√£ online."));
            server.addClient(user.getId(), this); // Th√™m client v√†o danh s√°ch server
        } else {
            sendMessage(new Message("login_failure", "T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng"));
        }
    }

    private void handleRegister(Message message) throws IOException, SQLException {
        String[] credentials = (String[]) message.getContent();
        String username = credentials[0];
        String password = credentials[1];
        
        // Validate username v√† password
        if (username == null || username.trim().isEmpty() || username.length() < 3) {
            sendMessage(new Message("register_failure", "T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±"));
            return;
        }
        
        if (password == null || password.trim().isEmpty() || password.length() < 6) {
            sendMessage(new Message("register_failure", "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±"));
            return;
        }
        
        // Ki·ªÉm tra username c√≥ ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát kh√¥ng
        if (!username.matches("^[a-zA-Z0-9_]+$")) {
            sendMessage(new Message("register_failure", "T√™n ƒëƒÉng nh·∫≠p ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i, s·ªë v√† d·∫•u g·∫°ch d∆∞·ªõi"));
            return;
        }
        
        try {
            User newUser = dbManager.registerUser(username, password);
            if (newUser != null) {
                sendMessage(new Message("register_success", "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p."));
            } else {
                sendMessage(new Message("register_failure", "T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
            sendMessage(new Message("register_failure", "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau"));
        }
    }

    private void handleLogout() throws IOException, SQLException {
        if (user != null) {
            dbManager.updateUserStatus(user.getId(), "offline");
            user.setStatus("offline");
            server.broadcast(new Message("status_update", user.getUsername() + " ƒë√£ offline."));
            if (socket != null && !socket.isClosed()) {
                sendMessage(new Message("logout_success", "ƒêƒÉng xu·∫•t th√†nh c√¥ng."));
            }
            isRunning = false; // D·ª´ng v√≤ng l·∫∑p
            server.removeClient(this);
            socket.close();
        }
    }

    private void handleGetUsers() throws IOException, SQLException {
        List<User> users = dbManager.getUsers();
        sendMessage(new Message("user_list", users));
    }

    private void handleMatchRequest(Message message) throws IOException, SQLException {
        int opponentId = (int) message.getContent();
        System.out.println("Received match request from user ID: " + user.getId() + " to opponent ID: " + opponentId);
        ClientHandler opponent = server.getClientById(opponentId);
        if (opponent != null) {
            System.out.println("Opponent found: " + opponent.getUser().getUsername() + " - Status: "
                    + opponent.getUser().getStatus());
            if (opponent.getUser().getStatus().equals("online")) {
                // G·ª≠i th√¥ng tin ng∆∞·ªùi m·ªùi: ID|Username
                String requestInfo = user.getId() + "|" + user.getUsername();
                opponent.sendMessage(new Message("match_request", requestInfo));
                System.out.println("Match request sent to " + opponent.getUser().getUsername());
            } else {
                sendMessage(new Message("match_response", "Ng∆∞·ªùi ch∆°i kh√¥ng s·∫µn s√†ng."));
                System.out.println("Opponent is not online.");
            }
        } else {
            sendMessage(new Message("match_response", "Ng∆∞·ªùi ch∆°i kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng online."));
            System.out.println("Opponent not found.");
        }
    }

    private void handleMatchResponse(Message message) throws IOException, SQLException {
        Object[] data = (Object[]) message.getContent();
        int requesterId = (int) data[0];
        boolean accepted = (boolean) data[1];
        ClientHandler requester = server.getClientById(requesterId);
        if (requester != null) {
            if (accepted) {
                // T·∫°o ph√≤ng ch∆°i gi·ªØa this v√† requester
                GameRoom newGameRoom = new GameRoom(this, requester, dbManager);
                this.gameRoom = newGameRoom;
                requester.gameRoom = newGameRoom;

                // update ingame status and broadcast all client --VIETHUNG--
                this.user.setStatus("ingame");
                requester.user.setStatus("ingame");

                dbManager.updateUserStatus(user.getId(), "ingame");
                requester.dbManager.updateUserStatus(user.getId(), "ingame");

                server.broadcast(new Message("status_update", user.getUsername() + " is ingame"));
                server.broadcast(new Message("status_update", requester.user.getUsername() + " is ingame"));

                newGameRoom.startMatch();
            } else {
                requester.sendMessage(new Message("match_response", "Y√™u c·∫ßu tr·∫≠n ƒë·∫•u c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi."));
            }
        }
    }

    private void handleChat(Message message) {
        // G·ª≠i l·∫°i tin nh·∫Øn t·ªõi t·∫•t c·∫£ client
        server.broadcast(new Message("chat", user.getUsername() + ": " + message.getContent()));
    }

    private void handleShoot(Message message) throws SQLException, IOException {
        if (gameRoom != null) {
            String shooterDir = (String) message.getContent();
            gameRoom.handleShot(shooterDir, this);
        }
    }

    private void handleGoalkeeper(Message message) throws SQLException, IOException {
        if (gameRoom != null) {
            String goalkeeperDir = (String) message.getContent();
            gameRoom.handleGoalkeeper(goalkeeperDir, this);
        }
    }

    public void sendMessage(Message message) {
        try {
            if (socket != null && !socket.isClosed()) {
                System.out.println("üì§ G·ª≠i message t·ªõi " + (user != null ? user.getUsername() : "client") + 
                    ": type=" + message.getType() + ", content=" + message.getContent());
                out.writeObject(message);
                out.flush();
                System.out.println("‚úÖ Message ƒë√£ g·ª≠i th√†nh c√¥ng");
            } else {
                System.out.println("‚ö†Ô∏è Socket ƒë√£ ƒë√≥ng, kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn t·ªõi " + 
                    (user != null ? user.getUsername() : "client"));
            }
        } catch (IOException e) {
            System.err.println("‚ùå L·ªói khi g·ª≠i tin nh·∫Øn t·ªõi " + 
                (user != null ? user.getUsername() : "client") + ": " + e.getMessage());
            e.printStackTrace();
            // Kh√¥ng g·ªçi l·∫°i handleLogout() ·ªü ƒë√¢y ƒë·ªÉ tr√°nh ƒë·ªá quy
            // ƒê√°nh d·∫•u client l√† ƒë√£ ng·∫Øt k·∫øt n·ªëi
            try {
                socket.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    public void clearGameRoom() {
        this.gameRoom = null;
    }

    public Server getServer() {
        return server;
    }

    // Ph∆∞∆°ng th·ª©c ng·∫Øt k·∫øt n·ªëi client
    public void disconnect() {
        try {
            isRunning = false;
            if (socket != null && !socket.isClosed()) {
                socket.close();
            }
            System.out.println("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi v·ªõi client: " + 
                (user != null ? user.getUsername() : "Unknown"));
        } catch (IOException e) {
            System.err.println("‚ùå L·ªói khi ng·∫Øt k·∫øt n·ªëi client:");
            e.printStackTrace();
        }
    }

}
